#version 450
#extension GL_EXT_debug_printf : enable

//
// SHA-256-n.comp: a compute shader for calculating SHA-256 hashes of inputs
//                 of arbitrary lengths (hence the 'n' suffice)
//

// Includes
//

#include "../common/SHA-256defs.h"

// Macros
//

// We're just sort of, well, assuming little endianness..
#define GET_U32_BE(x) SWOP_ENDS_U32(x)

#define UINT_BYTE_SIZE 4

#define Ch3(v) Ch((v).x, (v).y, (v).z)
#define Maj3(v) Maj((v).x, (v).y, (v).z)

// Layouts
//

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

#ifdef _SHA_256_N_
layout(push_constant, std430) uniform pc {
    uint offset;
    uint bound;
};

layout(std430, set = 0, binding = 0) readonly buffer input_layout
{
    uint data[];
};

layout(std430, set = 0, binding = 1) readonly buffer metadata_layout
{
    VkSha256Metadata metadata[];
};

layout(std430, set = 0, binding = 2) writeonly buffer result_layout
{
    VkSha256Result result[];
};
#endif // _SHA_256_N_

#ifdef _SHA_256_2_BE_
#ifdef _VKMR_BY_SUBGROUP_
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_shuffle_relative: enable

layout(push_constant, std430) uniform pc {
    uint offset;
    uint pairs;
    uint delta;
    uint d2;
    uint bound;
};
#else
layout(push_constant, std430) uniform pc {
    uint offset;
    uint pass;
    uint delta;
    uint bound;
};
#endif // _VKMR_BY_SUBGROUP_

layout(std430, set = 0, binding = 0) buffer leaf_layout
{
    VkSha256Result leaf[];
};
#endif // _SHA_256_2_BE_

// Constants
//

const uint c_constants[] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf,
                             0xe9b5dba5, 0x3956c25b, 0x59f111f1,
                             0x923f82a4, 0xab1c5ed5, 0xd807aa98,
                             0x12835b01, 0x243185be, 0x550c7dc3,
                             0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
                             0xc19bf174, 0xe49b69c1, 0xefbe4786,
                             0x0fc19dc6, 0x240ca1cc, 0x2de92c6f,
                             0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                             0x983e5152, 0xa831c66d, 0xb00327c8,
                             0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
                             0x06ca6351, 0x14292967, 0x27b70a85,
                             0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                             0x650a7354, 0x766a0abb, 0x81c2c92e,
                             0x92722c85, 0xa2bfe8a1, 0xa81a664b,
                             0xc24b8b70, 0xc76c51a3, 0xd192e819,
                             0xd6990624, 0xf40e3585, 0x106aa070,
                             0x19a4c116, 0x1e376c08, 0x2748774c,
                             0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
                             0x5b9cca4f, 0x682e6ff3, 0x748f82ee,
                             0x78a5636f, 0x84c87814, 0x8cc70208,
                             0x90befffa, 0xa4506ceb, 0xbef9a3f7,
                             0xc67178f2 };

const uvec4 Hinitial1 = uvec4( 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a );
const uvec4 Hinitial2 = uvec4( 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 );

// Globals
//

// Holds the current message block
uint M[SHA256_MESSAGE_BLOCK_WC];

// Holds the current working block
uint W[64];

// Functions
//

void sha256_computation(uint t, inout uvec4 h1, inout uvec4 h2) {
    const uint T1 = h2.w + Sigma1( h2.x ) + Ch3( h2 ) + c_constants[t] + W[t];
    const uint T2 = Sigma0( h1.x ) + Maj3( h1 );

    h2 = h2.xxyz;
    h2.x = h1.w + T1;

    h1 = h1.xxyz;
    h1.x = T1 + T2;
}

// Performs a single round of SHA-256 hashing on Big Endian inputs
void sha256_be_round(inout uvec4 H1, inout uvec4 H2) {

    // Prep the working variables
    uvec4 h1 = H1;
    uvec4 h2 = H2;

    // Round and round we go..
    uint t = 0;
    for ( ; t < SHA256_MESSAGE_BLOCK_WC; ++t){
        W[t] = M[t];
        sha256_computation(t, h1, h2);
    }
    for ( ; t < 64; ++t){
        W[t] = sigma1( W[t-2] ) + W[t-7] + sigma0( W[t-15] ) + W[t-16];
        sha256_computation(t, h1, h2);
    }

    // Accumulate the result
    H1 += h1;
    H2 += h2;
}

// Computes the SHA-256 hash of the given 256-bit Big Endian input
void sha256_be_1(inout uvec4 arg1, inout uvec4 arg2) {

    // Initialise the message
    uint w = 0;
    for ( ; w < 4; ++w){
        M[w] = arg1[w];
    }
    for (uint x = 0; w < 8; ++w, ++x){
        M[w] = arg2[x];
    }
    for (; w < (SHA256_MESSAGE_BLOCK_WC - 1); ++w){
        M[w] = 0U;
    }
    M[(SHA256_MESSAGE_BLOCK_WC / 2)] = 0x80000000;
    M[(SHA256_MESSAGE_BLOCK_WC - 1)] = 256;

    // Do the hashing
    arg1 = Hinitial1;
    arg2 = Hinitial2;
    sha256_be_round( arg1, arg2 );
}

#ifdef _SHA_256_N_
void main() {

    // Bounds check
    const uint gid = (offset + gl_GlobalInvocationID.x);
    if (gid > bound){
        return;
    }

    // Get the inputs
    const uint size = metadata[gid].size;
    const uint start = metadata[gid].start;

    // Get 'N', the number of blocks
    uint N = (size / SHA256_MESSAGE_BLOCK_BYTE_SIZE);
    if ((size % SHA256_MESSAGE_BLOCK_BYTE_SIZE) > 0){
        N++;
    }

    // If the supplementary block isn't large enough to
    // accomodate the trailing size footer..
    if (((N * SHA256_MESSAGE_BLOCK_BYTE_SIZE) - size) <= 8){
        N++;
    }

    // Set the initial hash values
    uvec4 H1 = Hinitial1;
    uvec4 H2 = Hinitial2;

    // Process each block
    for (uint i = 0, p = start; i < N; ++i){
        // Initialise an empty block
        for (uint w = 0; w < SHA256_MESSAGE_BLOCK_WC; ++w){
            M[w] = 0U;
        }

        // Prep it
        const uint offset = (i * SHA256_MESSAGE_BLOCK_BYTE_SIZE);
        if (offset >= size){
            if (size == offset){
                // The size of the input is an exact multiple of
                // the message block size, so in this, last, block
                // we set the message padding as the first bit of
                // the first word
                M[0] = 0x80000000;
            }

            M[SHA256_MESSAGE_BLOCK_WC-2] = MB_SIZE_TOP( size );
            M[SHA256_MESSAGE_BLOCK_WC-1] = MB_SIZE_BOTTOM( size );
        }else{
            // Get the offset to the start of the next message block, if any
            const uint next = (offset + SHA256_MESSAGE_BLOCK_BYTE_SIZE);
            if (next < size){
                // Fill the message with the bytes in the current block
                for (uint w = 0; w < SHA256_MESSAGE_BLOCK_WC; ++w, ++p){
                    M[w] = SWOP_ENDS_U32( data[p] );
                }
            }else{
                // Get the number of input bytes to be copied into the current block
                const uint outstanding = (size - offset);

                // wr: the number of bytes to be filled in the last word (w1-1)
                const uint wr = (outstanding % UINT_BYTE_SIZE);

                // w1: the number of whole or partial words to be filled
                uint w1 = (outstanding / UINT_BYTE_SIZE);
                if (wr > 0){
                    w1 += 1;
                }

                // Copy the words
                for (uint w = 0; w < w1; ++w, ++p){
                    M[w] = SWOP_ENDS_U32( data[p] );
                }

                // Get the number of bytes in the current block that will
                // not be touched by the input
                uint rem = (SHA256_MESSAGE_BLOCK_BYTE_SIZE - outstanding);
                if (rem > 0){
                    // If we get in here, then we need to set the message-
                    // padding bit in the first byte not touched by the
                    // input.
                    // 
                    // The word to be selected is the last partially-filled
                    // one or the first one after the last fully-filled one
                    const uint w0 = (wr > 0) ? (w1 - 1) : w1;
                    uint word = M[w0];

                    // Raise the leading bit on the indicated byte within
                    // the word, and apply
                    const uint x = ((UINT_BYTE_SIZE - (wr+1)) << 3);
                    word |= ((0x80 << x) & (0xFF << x));
                    //debugPrintfEXT( "HERE: wr = %u, x = %u, word = %08x, M[w0] = %08x\n", wr, x, word, SWOP_ENDS_U32(word) );
                    M[w0] = word;

                    // Now we have one less untouched byte..
                    rem--;
                }else{
                    // It'll be handled in the next block..
                    ;
                }
                if (rem >= 8){
                    // If we get in here, there is sufficient space in
                    // the current block to hold the message size, so..
                    M[SHA256_MESSAGE_BLOCK_WC-2] = MB_SIZE_TOP( size );
                    M[SHA256_MESSAGE_BLOCK_WC-1] = MB_SIZE_BOTTOM( size );
                }
            }
        }

        // Do the round
        sha256_be_round( H1, H2 );
    }

    // Apply the second round of hashing
    sha256_be_1( H1, H2 );

    // Output the result
    const uint wc = (SHA256_WC / 2);
    uint s = 0;
    for ( ; s < wc; ++s){
        result[gid].data[s] = H1[s];
    }
    for (uint r = 0; r < wc; ++r, ++s){
        result[gid].data[s] = H2[r];
    }
}
#endif // _SHA_256_N_

#ifdef _SHA_256_2_BE_
#ifdef _VKMR_BY_SUBGROUP_
void sha256_be_2(inout uvec4 H1, inout uvec4 H2) {
    H1 = Hinitial1;
    H2 = Hinitial2;
    sha256_be_round( H1, H2 );

    // Prep and process the second message block
    M[0] = 0x80000000;
    for (uint u = 1; u < (SHA256_MESSAGE_BLOCK_WC-1); ++u){
        M[u] = 0U;
    }
    M[SHA256_MESSAGE_BLOCK_WC-1] = 512;
    sha256_be_round( H1, H2 );

    // Apply the second round of hashing
    sha256_be_1( H1, H2 );
}

void main() {
    // Calc the index into the input data for the current invocation.
    // We clamp this to the bounds of the input data so every invocation
    // at or past this point will end up calculating the root of the
    // same sub-tree (but we only care about the first invocation)
    const uint idx = clamp( (gl_GlobalInvocationID.x + offset) * d2, 0, (bound-1) );

    // Prep the first message block
    uint u, v, w;
    for (u = 0, v = 0, w = idx; u < SHA256_WC; ++u, ++v){
        M[v] = leaf[w].data[u];
    }
    w += (((bound - w) > delta) ? delta : 0);
    for (u = 0; u < SHA256_WC; ++u, ++v){
        M[v] = leaf[w].data[u];
    }

    // Loop until we have reduced to one active invocation, where
    // the number of such invocations is size of the problem space,
    // expressed as the number of pairs of inputs
    uvec4 H1, H2;
    for (uint dw = 1, invocations = pairs; invocations > 1; dw <<= 1){
        // Hash the contents of the message block
        sha256_be_2( H1, H2 );

        // Copy into (first half of) the message block
        for (u = 0; u < SHA256_WC_HALF; ++u){
            M[u] = H1[u];
        }
        for (v = 0; v < SHA256_WC_HALF; ++u, ++v){
            M[u] = H2[v];
        }

        // Now, figure out the relative index of the thread
        // from which we want to grab the other half of the
        // input to the next iteration; this doubles at each
        // iteration, but not if it would mean reading past
        // the end of the source array
        w = ((idx + (dw * d2)) < bound) ? dw : 0;

        // Fetch and append to the message block
        uvec4 h = subgroupShuffleDown( H1, w );
        for (v = 0; v < SHA256_WC_HALF; ++u, ++v){
            M[u] = h[v];
        }
        h = subgroupShuffleDown( H2, w );
        for (v = 0; v < SHA256_WC_HALF; ++u, ++v){
            M[u] = h[v];
        }

        // Halve the number of active invocations
        invocations = (((invocations % 2) == 0) ? invocations : (invocations + 1)) >> 1;
    }
    if (gl_LocalInvocationID.x > 0){
        // We are only interested in the output from the first invocation in the group
        return;
    }

    // Do the last hash op, and copy out the result
    sha256_be_2( H1, H2 );
    for (u = 0; u < SHA256_WC_HALF; ++u){
        leaf[idx].data[u] = H1[u];
    }
    for (v = 0; v < SHA256_WC_HALF; ++u, ++v){
        leaf[idx].data[u] = H2[v];
    }
}
#else
void main() {
    // Bounds check
    const uint idx = (gl_GlobalInvocationID.x + offset) << pass;
    if (idx > bound){
        return;
    }

    // Set the initial hash values
    uvec4 H1 = Hinitial1;
    uvec4 H2 = Hinitial2;

    // Prep and process the first message block
    uint u, v, w;
    for (u = 0, v = 0, w = idx; u < SHA256_WC; ++u, ++v){
        M[v] = leaf[w].data[u];
    }
    for (u = 0, w += delta; u < SHA256_WC; ++u, ++v){
        M[v] = leaf[w].data[u];
    }
    sha256_be_round( H1, H2 );

    // Prep and process the second message block
    M[0] = 0x80000000;
    for (u = 1; u < (SHA256_MESSAGE_BLOCK_WC-1); ++u){
        M[u] = 0U;
    }
    M[SHA256_MESSAGE_BLOCK_WC-1] = 512;
    sha256_be_round( H1, H2 );

    // Apply the second round of hashing
    sha256_be_1( H1, H2 );

    // Output the result
    const uint wc = (SHA256_WC / 2);
    for (u = 0; u < wc; ++u){
        leaf[idx].data[u] = H1[u];
    }
    for (v = 0; v < wc; ++u, ++v){
        leaf[idx].data[u] = H2[v];
        //debugPrintfEXT("%u => %08x, %08x\n", u, H2[v], leaf[w].data[u]);
    }
}
#endif // _VKMR_BY_SUBGROUP_
#endif // _SHA_256_2_BE_
