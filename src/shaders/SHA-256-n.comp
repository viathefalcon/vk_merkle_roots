#version 450
#extension GL_EXT_debug_printf : enable

//
// SHA-256-n.comp:	a compute shader for calculating SHA-256 hashes of inputs
//					of arbitrary lengths (hence the 'n' suffice)
//

// Includes
//

#include "../common/SHA-256defs.h"

// Macros
//

// We're just sort of, well, assuming little endianness..
#define GET_U32_BE(x) SWOP_ENDS_U32(x)

#define UINT_BYTE_SIZE					4

#define Ch3(v) Ch((v).x, (v).y, (v).z)
#define Maj3(v) Maj((v).x, (v).y, (v).z)

// Layouts
//

layout(std430, set = 0, binding = 0) readonly buffer inputs
{
	uint data[];
};

layout(std430, set = 0, binding = 1) readonly buffer metadatas
{
	VkSha256Metadata metadata[];
};

layout(std430, set = 0, binding = 2) writeonly buffer results
{
    VkSha256Result result[];
};

// Constants
//

const uint c_constants[] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf,
                             0xe9b5dba5, 0x3956c25b, 0x59f111f1,
                             0x923f82a4, 0xab1c5ed5, 0xd807aa98,
                             0x12835b01, 0x243185be, 0x550c7dc3,
                             0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
                             0xc19bf174, 0xe49b69c1, 0xefbe4786,
                             0x0fc19dc6, 0x240ca1cc, 0x2de92c6f,
                             0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                             0x983e5152, 0xa831c66d, 0xb00327c8,
                             0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
                             0x06ca6351, 0x14292967, 0x27b70a85,
                             0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                             0x650a7354, 0x766a0abb, 0x81c2c92e,
                             0x92722c85, 0xa2bfe8a1, 0xa81a664b,
                             0xc24b8b70, 0xc76c51a3, 0xd192e819,
                             0xd6990624, 0xf40e3585, 0x106aa070,
                             0x19a4c116, 0x1e376c08, 0x2748774c,
                             0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
                             0x5b9cca4f, 0x682e6ff3, 0x748f82ee,
                             0x78a5636f, 0x84c87814, 0x8cc70208,
                             0x90befffa, 0xa4506ceb, 0xbef9a3f7,
                             0xc67178f2 };

const uvec4 Hinitial1 = uvec4( 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a );
const uvec4 Hinitial2 = uvec4( 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 );

// Functions
//

// Computes the SHA-256 hash of the given 256-bit Big Endian input
void sha256_be_1(inout uvec4 arg1, inout uvec4 arg2) {

	// Initialise the message
	uint M[SHA256_MESSAGE_BLOCK_WC];
	uint w = 0;
	for ( ; w < 4; ++w){
		M[w] = arg1[w];
	}
	for (uint x = 0; w < 8; ++w, ++x){
		M[w] = arg2[x];
	}
	for (; w < (SHA256_MESSAGE_BLOCK_WC - 1); ++w){
		M[w] = 0U;
	}
	M[(SHA256_MESSAGE_BLOCK_WC / 2)] = 0x80000000;
	M[(SHA256_MESSAGE_BLOCK_WC - 1)] = 256;

	// Initialise the working variables
	uvec4 h1 = Hinitial1;
	uvec4 h2 = Hinitial2;

	// Loop
	uint W[64];
	for (uint t = 0; t < 64; ++t){
		// Prep the message schedule
		if (t < SHA256_MESSAGE_BLOCK_WC){
			W[t] = M[t];
		}else{
			W[t] = sigma1( W[t-2] ) + W[t-7] + sigma0( W[t-15] ) + W[t-16];
		}
		const uint T1 = h2.w + Sigma1( h2.x ) + Ch3( h2 ) + c_constants[t] + W[t];
		const uint T2 = Sigma0( h1.x ) + Maj3( h1 );

		h2 = h2.xxyz;
		h2.x = h1.w + T1;

		h1 = h1.xxyz;
		h1.x = T1 + T2;
	}

	// Accumulate the result
	arg1 = Hinitial1 + h1;
	arg2 = Hinitial2 + h2;
}

#ifdef _SHA_256_N_
void main() {
	// Get the inputs
	const uint gid = gl_GlobalInvocationID.x;
	const uint size = metadata[gid].size;
	const uint start = metadata[gid].start;

	// Get 'N', the number of blocks
	uint N = (size / SHA256_MESSAGE_BLOCK_BYTE_SIZE);
	if ((size % SHA256_MESSAGE_BLOCK_BYTE_SIZE) > 0){
		N++;
	}

	// If the supplementary block isn't large enough to
	// accomodate the trailing size footer..
	const uint delta = ((N * SHA256_MESSAGE_BLOCK_BYTE_SIZE) - size);
	if (delta <= 8){
		N++;
	}

	// Set the initial hash values
	uvec4 H1 = Hinitial1;
	uvec4 H2 = Hinitial2;

	// Process each block
	for (uint i = 0; i < N; ++i){
		// Initialise an empty block
		uint M[SHA256_MESSAGE_BLOCK_WC];
		for (uint w = 0; w < SHA256_MESSAGE_BLOCK_WC; ++w){
			M[w] = 0U;
		}

		// Prep it
		const uint offset = (i * SHA256_MESSAGE_BLOCK_BYTE_SIZE);
		if (offset >= size){
			if (size == offset){
				M[0] = 0x00000080;
			}

			M[SHA256_MESSAGE_BLOCK_WC-2] = MB_SIZE_BE_TOP( size );
			M[SHA256_MESSAGE_BLOCK_WC-1] = MB_SIZE_BE_BOTTOM( size );
		}else{
			uint p = start + offset;

			const uint next = (offset + SHA256_MESSAGE_BLOCK_BYTE_SIZE);
			if (next < size){
				// Fill the message with the bytes in the current block
				for (uint w = 0; w < SHA256_MESSAGE_BLOCK_WC; ++w, ++p){
					M[w] = data[p];
				}
			}else{
				// Count the number of outstanding bytes
				const uint bytes = (size - offset);
				const uint wr = (bytes % UINT_BYTE_SIZE);
				uint w1 = bytes / UINT_BYTE_SIZE;
				if (wr > 0){
					w1 += 1;
				}

				// w1: the number of whole or partial words to be filled
				// wr: the number of bytes filled in the last word (w1-1)
				for (uint w = 0; w < w1; ++w, ++p){
					M[w] = data[p];
				}

				uint delta = (SHA256_MESSAGE_BLOCK_BYTE_SIZE - bytes);
				if (delta > 0){
					// The word to be selected is the last partially-filled
					// one or the next one after the last fully-filled one
					const uint w0 = (wr > 0) ? (w1 - 1) : w1;
					uint word = M[w0];

					// Raise the leading bit on the indicated byte within
					// the word, and apply
					const uint x = (wr << 3);
					word |= ((0x80 << x) & (0xFF << x));
					M[w0] = word;

					delta--;
				}else{
					// It'll be handled in the next block..
					;
				}
				if (delta >= 8){
					M[SHA256_MESSAGE_BLOCK_WC-2] = MB_SIZE_BE_TOP( size );
					M[SHA256_MESSAGE_BLOCK_WC-1] = MB_SIZE_BE_BOTTOM( size );
				}
			}
		}

		// Initialise the working variables
		uvec4 h1 = H1;
		uvec4 h2 = H2;

		// Loop
		uint W[64];
		for (uint t = 0; t < 64; ++t){
			// Prep the message schedule
			if (t < SHA256_MESSAGE_BLOCK_WC){
				W[t] = SWOP_ENDS_U32( M[t] );
			}else{
				W[t] = sigma1( W[t-2] ) + W[t-7] + sigma0( W[t-15] ) + W[t-16];
			}
			const uint T1 = h2.w + Sigma1( h2.x ) + Ch3( h2 ) + c_constants[t] + W[t];
			const uint T2 = Sigma0( h1.x ) + Maj3( h1 );

			h2 = h2.xxyz;
			h2.x = h1.w + T1;

			h1 = h1.xxyz;
			h1.x = T1 + T2;
		}

		// Compute the i-th intermediate hash value
		H1 += h1;
		H2 += h2;
	}

	// Apply the second round of hashing
	sha256_be_1( H1, H2 );

	// Output the result
	const uint wc = (SHA256_WC / 2);
	uint s = 0;
	for ( ; s < wc; ++s){
		const uint v = H1[s];

		// The output of the algorithm is big-endian in nature
		result[gid].data[s] = SWOP_ENDS_U32( v );
	}
	for (uint r = 0; r < wc; ++r, ++s){
		const uint v = H2[r];

		// The output of the algorithm is big-endian in nature
		result[gid].data[s] = SWOP_ENDS_U32( v );
	}
}
#endif // _SHA_256_N_
